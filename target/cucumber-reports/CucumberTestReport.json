[
  {
    "comments": [
      {
        "line": 1,
        "value": "# TCERID: 5970"
      },
      {
        "line": 2,
        "value": "# TEST CASE: ANA _ DM Creation of relational database multiple tables with schema."
      },
      {
        "line": 3,
        "value": "# Description: The service provides the ability to create one or more relational database tables with a particular schema,"
      },
      {
        "line": 4,
        "value": "#via the use of a create datamart REST API, in which a SQL schema is included as part of the request."
      }
    ],
    "line": 6,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 1588911,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.before(Scenario)"
            }
          }
        ],
        "line": 7,
        "name": "Create new SQL DDL Schema in Datamart",
        "description": "",
        "id": "datamart-sql-ddl-schema-creation;create-new-sql-ddl-schema-in-datamart",
        "after": [
          {
            "result": {
              "duration": 65082,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.after(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 323709303,
              "error_message": "java.lang.IllegalArgumentException: SSL context may not be null\n\tat org.apache.http.util.Args.notNull(Args.java:54)\n\tat org.apache.http.conn.ssl.SSLSocketFactory.\u003cinit\u003e(SSLSocketFactory.java:349)\n\tat com.ibmwatsonhealth.devopsservices.swaggertestasset.swaggerParserUtility.domain.RESTFactory.getSSLCert(RESTFactory.java:718)\n\tat com.ibmwatsonhealth.devopsservices.swaggertestasset.swaggerParserUtility.domain.RESTFactory.postRequest(RESTFactory.java:307)\n\tat com.ibmwatsonhealth.devopsservices.swaggertestasset.swaggerParserUtility.stepdefinitions.StepDefinitionsRestServices.user_sends_a_POST_request_to(StepDefinitionsRestServices.java:147)\n\tat âœ½.When user sends a POST request to \"https://idmz-dp.ci41.lsf04.ibmwhc.net:9443/datamart/api/v1/\"(src/test/java/resources/features/Feature011_CreateSqlDataMartSchema.feature:9)\n",
              "status": "failed"
            },
            "line": 9,
            "name": "user sends a POST request to \"https://idmz-dp.ci41.lsf04.ibmwhc.net:9443/datamart/api/v1/\"",
            "match": {
              "arguments": [
                {
                  "val": "https://idmz-dp.ci41.lsf04.ibmwhc.net:9443/datamart/api/v1/",
                  "offset": 30
                }
              ],
              "location": "StepDefinitionsRestServices.user_sends_a_POST_request_to(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "header with",
            "match": {
              "location": "StepDefinitionsRestServices.header_with(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ],
                "line": 11
              },
              {
                "cells": [
                  "Accept",
                  "application/json"
                ],
                "line": 12
              },
              {
                "cells": [
                  "iv-user",
                  "hatestdb2"
                ],
                "line": 13
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 14,
            "name": "content",
            "match": {
              "location": "StepDefinitionsRestServices.content(String)"
            },
            "keyword": "And ",
            "doc_string": {
              "content_type": "",
              "line": 15,
              "value": "{\"mode\":\"private\", \"name\":\"test_export\", \"description\":\"testing\", \"owner\":\"hatestdb2\", \"datamartType\":\"db2native\", \"schema\":\"CREATE TABLE TEST2 (id bigint NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1), FIELD1 varchar(255) NOT NULL, FIELD2 bigint NOT NULL, PRIMARY KEY (id));\" }  \n"
            }
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 19,
                "value": "# set variable data mart id from previous step"
              }
            ],
            "line": 20,
            "name": "response value \"id\" is stored",
            "match": {
              "arguments": [
                {
                  "val": "id",
                  "offset": 16
                }
              ],
              "location": "StepDefinitionsRestServices.response_value_is_stored(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 21,
            "name": "response status code should be 201",
            "match": {
              "arguments": [
                {
                  "val": "201",
                  "offset": 31
                }
              ],
              "location": "StepDefinitionsRestServices.response_status_code_should_be(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 23,
                "value": "# check if asynchronous processing is completed"
              },
              {
                "line": 24,
                "value": "# variables tagged {global} would be resolved before execution"
              },
              {
                "line": 25,
                "value": "# build the http request object"
              }
            ],
            "line": 26,
            "name": "user sends asynchronous GET request to \"https://idmz-dp.ci41.lsf04.ibmwhc.net:9443/datamart/api/v1/{id}\"",
            "match": {
              "arguments": [
                {
                  "val": "https://idmz-dp.ci41.lsf04.ibmwhc.net:9443/datamart/api/v1/{id}",
                  "offset": 40
                }
              ],
              "location": "StepDefinitionsRestServices.user_sends_asynchronous_GET_request_to(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 27,
            "name": "path parameter with",
            "match": {
              "location": "StepDefinitionsRestServices.path_parameter_with(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ],
                "line": 28
              },
              {
                "cells": [
                  "id",
                  "{global}"
                ],
                "line": 29
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "header with",
            "match": {
              "location": "StepDefinitionsRestServices.header_with(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ],
                "line": 31
              },
              {
                "cells": [
                  "Accept",
                  "application/json"
                ],
                "line": 32
              },
              {
                "cells": [
                  "iv-user",
                  "hatestdb2"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 34,
                "value": "# keep actively polling till \"status\" field in response changes to \"DONE\""
              }
            ],
            "line": 35,
            "name": "waits on \"status\" to be \"Done\"",
            "match": {
              "arguments": [
                {
                  "val": "status",
                  "offset": 10
                },
                {
                  "val": "Done",
                  "offset": 25
                }
              ],
              "location": "StepDefinitionsRestServices.waits_on_to_be(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "maxTimeOut is 500 seconds",
            "match": {
              "arguments": [
                {
                  "val": "500",
                  "offset": 14
                }
              ],
              "location": "StepDefinitionsRestServices.maxtimeout_is_ms(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 37,
                "value": "# start running assertions on the response"
              }
            ],
            "line": 38,
            "name": "response status code should be 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 31
                }
              ],
              "location": "StepDefinitionsRestServices.response_status_code_should_be(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "response header contains",
            "match": {
              "location": "StepDefinitionsRestServices.response_header_contains(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "key",
                  "value"
                ],
                "line": 40
              },
              {
                "cells": [
                  "content-type",
                  "application/json"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 42,
            "name": "response status line is \"OK\"",
            "match": {
              "arguments": [
                {
                  "val": "OK",
                  "offset": 25
                }
              ],
              "location": "StepDefinitionsRestServices.response_status_line_is(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "DataMart SQL DDL Schema creation",
    "description": "",
    "id": "datamart-sql-ddl-schema-creation",
    "keyword": "Feature",
    "uri": "src/test/java/resources/features/Feature011_CreateSqlDataMartSchema.feature",
    "tags": [
      {
        "line": 5,
        "name": "@createSqlSchemaDataMart"
      }
    ]
  }
]